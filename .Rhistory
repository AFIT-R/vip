fit <- lm(cmedv ~ ., data = boston)
z <- summary(fit)
z$coefficients
z$coefficients[, "t value"]
z$coefficients[-1, "t value"]
tibble::as.tibble(z$coefficients[-1, "t value"])
tibble::as.tibble(z$coefficients)
tibble::as.tibble(as.data.frame(z$coefficients))
as.data.frame(z$coefficients)
library(vip)
vi(fit)
source('C:/Users/greenweb/Desktop/devel/vip/R/vi.R', echo=TRUE)
vi(fit)
z
z$coefficients[, "t vals"]
colnames(z$coefficients)
source('C:/Users/greenweb/Desktop/devel/vip/R/vi.R', echo=TRUE)
vi(fit)
fit$terms
attr(fit, "intercept") == 1
attr(fit, "intercept")
?attr
attr(fit$terms, "intercept")
vi.lm <- function(object, type = NULL, class = NULL, scale = TRUE) {
coefs <- summary(object)$coefficients
if (attr(object$terms, "intercept") == 1) {
coefs <- coefs[-1, ]
}
preds <- rownames(coefs)
imp <- abs(coefs[, "t value"])
tibble::tibble("Variable" = preds, "Importance" = imp)
}
vi.lm <- function(object) {
coefs <- summary(object)$coefficients
if (attr(object$terms, "intercept") == 1) {
coefs <- coefs[-1, ]
}
preds <- rownames(coefs)
imp <- abs(coefs[, "t value"])
tibble::tibble("Variable" = preds, "Importance" = imp)
}
vi(fit)
?tibble::tibble
?order
source('C:/Users/greenweb/Desktop/devel/vip/R/vi.R', echo=TRUE)
vi(fit)
#' @export
vi.lm <- function(object) {
coefs <- summary(object)$coefficients
if (attr(object$terms, "intercept") == 1) {
coefs <- coefs[-1, ]
}
preds <- rownames(coefs)
imp <- abs(coefs[, "t value"])
preds <- preds[order(imp, decreasing = FALSE)]
tibble::tibble("Variable" = preds, "Importance" = sort(imp))
}
vi(fit)
?sort
source('C:/Users/greenweb/Desktop/devel/vip/R/vi.R', echo=TRUE)
vi(fit)
library(vip)
vip(fit)
source('C:/Users/greenweb/Desktop/devel/vip/R/vip.R', echo=TRUE)
vip(fit)
library(vip)
vip(fit)
library(vip)
vip(fit)
imp <- vi(fit)
library(ggplot2)
ggplot(imp, aes(Variable, Importance)) +geom_col()
ggplot(imp, aes(Variable, Importance)) +geom_col() + coord_flip()
library(vip)
vip(fit)
vip.lm
source('C:/Users/greenweb/Desktop/devel/vip/R/vip.R', echo=TRUE)
vip(fit)
?reoder
?rorder
?reorder
source('C:/Users/greenweb/Desktop/devel/vip/R/vip.R', echo=TRUE)
source('C:/Users/greenweb/Desktop/devel/vip/R/vip.R', echo=TRUE)
vip(fit)
?reorder
source('C:/Users/greenweb/Desktop/devel/vip/R/vip.R', echo=TRUE)
vip(fit)
source('C:/Users/greenweb/Desktop/devel/vip/R/vip.R', echo=TRUE)
vip(fit)
library(vip)
vip(fit) + theme_bw()
library(vip)
source('C:/Users/greenweb/Desktop/devel/vip/R/vip.R', echo=TRUE)
vip(fit) + theme_bw()
vip(fit, fill = "red") + theme_bw()
source('C:/Users/greenweb/Desktop/devel/vip/R/vip.R', echo=TRUE)
vip(fit, fill = "red") + theme_bw()
rm(vip.lm)
vip(fit, fill = "red") + theme_bw()
vip(fit, fill = aes_string(fill = "Importance")) + theme_bw()
vip(fit, fill = aes_string(fill = "Importance")) + theme_bw()
aes_string(fill = "Importance")
vip(fit, fill = 'aes_string(fill = "Importance")' + theme_bw()
)
vip(fit, fill = 'aes_string(fill = "Importance")') + theme_bw()
caret:::varImpDependencies("lm")
?mtcars
mtcars.lm <- lm(mpg ~ ., data = mtcars)
vip(mtcars.lm) + theme_light()
library(vip)
# Load the data
load("C:\\Users\\greenweb\\Desktop\\R code\\SmithJrawarticle.RData")
art <- DFArticles
class(art)
dim(art)
names(art)
# Write the raw text to individual files
for (i in 3:nrow(art)) {
# The first two contain no text?
file.conn<-file(paste0("C:\\Users\\greenweb\\Desktop\\R code\\articles\\article-", i, ".txt"))
writeLines(art$Text[i], file.conn)
close(file.conn)
}
# Load required packages
library(tidytext)
library(tm)
library(topicmodels)
# Create a document term matrix
art.vcorpus <- VCorpus(DirSource("C:\\Users\\greenweb\\Desktop\\R code\\articles"),
list(reader = readPlain))
art.dtm <- DocumentTermMatrix(art.vcorpus, control = list(stopwords = TRUE))
# Analyze
art.lda <- LDA(art.dtm, k = 2)
get_topics(art.lda)  # show which topic each document belongs to
?tm_map
names(art.vcorpus)
install.packages("pdp")
data(boston, package = "pdp")  # load the boston housing data
boston.lm <- lm(cmedv ~ ., data = boston)
vip(boston.lm)
library(vip)
# install.packages("pdp")
data(boston, package = "pdp")  # load the boston housing data
boston.lm <- lm(cmedv ~ ., data = boston)
vip(boston.lm)
caret:::varImpDependencies("rf")
importance(fit1)
all.vars(y ~ x + I(x^2))
all.vars(y ~ x + I(x^2) + x3)
all.vars((y ~ x + I(x^2) + x3)[[3L]])
library(vip)
vi(trn.lm)
# Load required packages
library(mlbench)
library(nnet)
library(pdp)
library(randomForest)
# Simulatetraining data
set.seed(101)
trn <- as.data.frame(mlbench.friedman1(500, sd = 1))
# Fit models
trn.lm <- lm(y ~ ., data = trn)
set.seed(102)
trn.rf <- randomForest(y ~ ., data = trn, importance = TRUE)
trn.nn <- nnet(y ~ ., data = trn, size = 10, linout = TRUE, decay = 0.001,
maxit = 1000)
vi(trn.lm)
library(vip)
vip(trn.lm)
vip(trn.lm, use.partial = TRUE)
vip(trn.nn, use.partial = TRUE)
vip(trn.nn, use.partial = TRUE, pred.var = names(trn))
library(vip)
vip(trn.nn, use.partial = TRUE, pred.var = names(trn))
library(vip)
vip(trn.nn, use.partial = TRUE, pred.var = names(trn))
library(gridExtra)
library(vip)
data(boston, package = "pdp")  # load the boston housing data
boston.lm <- lm(cmedv ~ ., data = boston)
grid.arrange(
vip(boston.lm),
vip(boston.lm, use.partial = TRUE)
)
library(gridExtra)
library(vip)
data(boston, package = "pdp")  # load the boston housing data
boston.lm <- lm(cmedv ~ ., data = boston)
grid.arrange(
vip(boston.lm),
vip(boston.lm, use.partial = TRUE)
)
library(gridExtra)
library(vip)
data(boston, package = "pdp")  # load the boston housing data
boston.lm <- lm(cmedv ~ ., data = boston)
grid.arrange(vip(boston.lm), vip(boston.lm, use.partial = TRUE), ncol = 2)
?mlbench::mlbench.friedman1
dim(trn)
if (!requireNamespace("mlbench")) install.packages("mlbench")
set.seed(101)  # for reproducibility
trn <- as.data.frame(mlbench::mlbench.friedman1(n = 500, sd = 1))
tibble::glimpse(trn)
tibble::as.tibble(trn)
if (!requireNamespace("mlbench")) install.packages("mlbench")
set.seed(101)  # for reproducibility
trn <- as.data.frame(mlbench::mlbench.friedman1(n = 500, sd = 1))
tibble::glimpse(trn)
if (!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("AFIT-R/vip")
library(vip)
if (!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("AFIT-R/vip")
library(vip)
library(vip)
trn.lm <- lm(y ~ ., data = trn)
p1 <- vip(trn.lm)
p2 <- vip(trn.lm, use.partial = TRUE)
gridExtra::grid.arrange(p1, p2, ncol = 2)  # display plots side-by-side
library(vip)
library(vip)
trn.lm <- lm(y ~ ., data = trn)
p1 <- vip(trn.lm)
p2 <- vip(trn.lm, use.partial = TRUE)
gridExtra::grid.arrange(p1, p2, ncol = 2)  # display plots side-by-side
set.seed(102)
trn.nn <- nnet(y ~ ., data = trn, size = 10, linout = TRUE, decay = 0.001,
maxit = 1000)
vip(trn.nn, use.partial = TRUE, pred.var = names(trn))
?nnet
paste0("x.", 1:10)
library(randomForest)  # install.packages("randomForest")
set.seed(102)
trn.rf <- randomForest(y ~ ., data = trn, importance = TRUE)
importance(trn.rf)
vip(trn.rf, use.partial = TRUE, pred.var = paste0("x.", 1:10))
?vi
library(vip)
?vi
?vip::vi
vip::vi
?vip::vi
library(vip)
library(vip)
library(vip)
?vi
library(vip)
if (!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("AFIT-R/vip")
if (!requireNamespace("mlbench")) install.packages("mlbench")
set.seed(101)  # for reproducibility
trn <- as.data.frame(mlbench::mlbench.friedman1(n = 500, sd = 1))
tibble::glimpse(trn)
library(vip)
trn.lm <- lm(y ~ ., data = trn)
p1 <- vip(trn.lm)
p2 <- vip(trn.lm, use.partial = TRUE)
gridExtra::grid.arrange(p1, p2, ncol = 2)  # display plots side-by-side
library(randomForest)  # install.packages("randomForest")
set.seed(102)
trn.rf <- randomForest(y ~ ., data = trn, importance = TRUE)
importance(trn.rf)  # for comparison
vip(trn.rf, use.partial = TRUE, pred.var = paste0("x.", 1:10))
library(nnet)  # install.packages("nnet")
set.seed(103)
trn.nn <- nnet(y ~ ., data = trn, size = 10, linout = TRUE, decay = 0.001,
maxit = 1000, trace = FALSE)
vip(trn.nn, use.partial = TRUE, pred.var = paste0("x.", 1:10))
library(vip)
?range
library(vip)
library(vip)
library(vip)
geom_col
library(ggplot2)
geom_col
library(vip)
vip(trn.lm)
vip(trn.lm, fill = "red")
library(vip)
vip(trn.lm, fill = "red")
vip(trn.lm)
vip(trn.lm)
library(vip)
vip(trn.lm)
?geom_col
library(vip)
if (!requireNamespace("mlbench")) install.packages("mlbench")
set.seed(101)  # for reproducibility
trn <- as.data.frame(mlbench::mlbench.friedman1(n = 500, sd = 1))
tibble::glimpse(trn)
trn.lm <- lm(y ~ ., data = trn)
vip(trn.lm)
vip(trn.lm, fill = "red", alpha = 0.1)
library(vip)
vip(trn.lm, fill = heat.color(10))
vip(trn.lm, fill = heat.colors(10))
?heat.colors
library(vip)
library(vip)
vip(trn.lm, fill = cm.colors(10))
vip(trn.lm, fill = topo.colors(10))
vip(trn.lm, fill = terrain.colors(10))
vip(trn.lm, fill = cm.colors(10))
vip(trn.lm, fill = cm.colors(10), alpha = 0.5)
library(ggplot2)
library(nnet)  # install.packages("nnet")
set.seed(103)
trn.nn <- nnet(y ~ ., data = trn, size = 10, linout = TRUE, decay = 0.001,
maxit = 1000, trace = FALSE)
vip(trn.nn, use.partial = TRUE, pred.var = paste0("x.", 1:10), alpha = 0.5) +
theme_light() +
xlab("Partial dependence-based variable importance") +
ggtitle("Neural network variable importance scores")
library(ggplot2)
library(nnet)  # install.packages("nnet")
set.seed(103)
trn.nn <- nnet(y ~ ., data = trn, size = 10, linout = TRUE, decay = 0.001,
maxit = 1000, trace = FALSE)
vip(trn.nn, use.partial = TRUE, pred.var = paste0("x.", 1:10), alpha = 0.5) +
theme_light() +
xlab("Partial dependence-based variable importance") +
ggtitle("Neural network variable importance scores")
caret::R2
caret::R2(predict(trn.lm), trn$y, formula = "traditional")
summary(trn.lm)
caret::R2(predict(trn.lm), trn$y, formula = "traditional")
modelr::rsquare(trn.lm, trn)
?modelr::sigma
?sigma.lm
?sigma
library(robustHD) # To load the TopGear data set
library(tidyverse) # For data manipulation and organization
library(grid) # For plot layouts
library(gridExtra) # For plot layouts
library(plotly)
install.packages("robustHD")
library(robustHD) # To load the TopGear data set
# Load data
data(TopGear)
# Create data frame with attributes
TG_DF <- TopGear %>%
select(Maker, Model, Acceleration, BHP, MPG, TopSpeed, Torque) %>%
na.omit() %>%
filter(MPG < 235) %>%
mutate(Car = paste(Maker, Model, sep = "_"))
# Create data frame with only numeric variables
TG_Performance <- select(TG_DF, Acceleration, BHP, MPG, TopSpeed, Torque)
# View first Car attribute and performance measures
head(TG_DF[, c(8, 3:7)])
prcomp(TF_DF)
pc <- prcomp(TG_DF)
head(TG_DF)
pc <- prcomp(TG_DF[, 3:7])
plot(pc)
scaled_TG2 <- apply(TG_Performance, 2, scale)
# Exercise 2. Covariance Matrix
#----------------------------------------------------------------------------
cov_TG2 <- cov(scaled_TG2)
# Exercise 3. Eigenvectors and eigenvalues
# ---------------------------------------------------------------------------
eigen_TG2 <- eigen(cov_TG2)
loadings_TG2 <- -eigen_TG2$vectors
pc <- prcomp(TG_Performance)
pc$rotation
loadings_TG2
?prcomp
pc <- prcomp(TG_Performance, center = FALSE)
pc$rotation
?princomp
pc <- princomp(TG_Performance, center = FALSE)
pc <- princomp(TG_Performance)
pc <- princomp(TG_Performance)$loadings
pc
pc <- princomp(TG_Performance)
names(pc)
pc$center
pc <- princomp(TG_Performance, covmat = cov(TG_Performance))
pc <- princomp(covmat = cov(TG_Performance))
pc$loadings
loadings_TG2
pc$scores
pc <- princomp(covmat = cov(TG_Performance), scores = TRUE)
pc$scores
pc <- princomp(TG_Performance, scores = TRUE)
pc$scores
princomp
princomp.default
methods(princomp)
getAnywhere(princomp.default)
pc <- princomp(scaled_TG2)
pc$loadings
loadings_TG2
plot(pc)
library(vip)
imp <- pdVarImp(trn.lm, pred.var = "x.4")
imp
imp <- pdVarImp(trn.lm, pred.var = "x.4", return.partial = TRUE)
imp
attributes(imp)
library(vip)
imp <- pdVarImp(trn.lm, pred.var = "x.4", return.partial = TRUE)
imp
autoplot(attr(imp, "partial"))
ggplot2::autoplot(attr(imp, "partial"))
pdVarImp(trn.nn, pred.var = "x.4")
imp <- pdVarImp(trn.nn, pred.var = "x.4", return.partial = TRUE)
ggplot2::autoplot(attr(imp, "partial"))
pdVarImp(trn.nn, pred.var = "x.4")
imp <- pdVarImp(trn.nn, pred.var = "x.4", return.partial = TRUE)
ggplot2::autoplot(attr(imp, "partial"))
library(ggplot2)
library(nnet)  # install.packages("nnet")
set.seed(103)
trn.nn <- nnet(y ~ ., data = trn, size = 10, linout = FALSE, decay = 0.001,
maxit = 1000, trace = FALSE)
vip(trn.nn, use.partial = TRUE, pred.var = paste0("x.", 1:10), alpha = 0.5) +
theme_light() +
ylab("Partial dependence-based variable importance") +
ggtitle("Neural network variable importance scores")
pdVarImp(trn.nn, pred.var = "x.4")
imp <- pdVarImp(trn.nn, pred.var = "x.4", return.partial = TRUE)
ggplot2::autoplot(attr(imp, "partial"))
library(ggplot2)
library(nnet)  # install.packages("nnet")
set.seed(103)
trn.nn <- nnet(y ~ ., data = trn, size = 10, linout = TRUE, decay = 0.001,
maxit = 1000, trace = FALSE)
vip(trn.nn, use.partial = TRUE, pred.var = paste0("x.", 1:10), alpha = 0.5) +
theme_light() +
ylab("Partial dependence-based variable importance") +
ggtitle("Neural network variable importance scores")
?mlbench::mlbench.friedman1
pdVarImp(trn.nn, pred.var = "x.4")
imp <- pdVarImp(trn.nn, pred.var = "x.4", return.partial = TRUE)
ggplot2::autoplot(attr(imp, "partial"))
imp <- pdVarImp(trn.nn, pred.var = "x.3", return.partial = TRUE)
ggplot2::autoplot(attr(imp, "partial"))
pdVarImp(trn.nn, pred.var = "x.3")
imp <- pdVarImp(trn.nn, pred.var = "x.3", return.partial = TRUE)
ggplot2::autoplot(attr(imp, "partial"))
pdVarImp(trn.nn, pred.var = "x.3")
imp <- pdVarImp(trn.nn, pred.var = "x.3", return.partial = TRUE)
ggplot2::autoplot(attr(imp, "partial"))
imp <- vi(trn.nn, pred.var = paste0("x.", 1:10), return.partial = TRUE)
imp
attributes(imp, "partial")
attributes(imp)
imp[1]
imp
pred.var <- paste0("x.", 1:10)
imp <- sapply(pred.var, function(x) pdVarImp(object, pred.var = x, ...))
imp <- sapply(pred.var, function(x) pdVarImp(trn.nn, pred.var = x, return.partial = TRUE))
imp
imp[1L]
imp[2L]
imp[10L]
?sapply
imp <- lapply(pred.var, function(x) pdVarImp(trn.nn, pred.var = x, return.partial = TRUE))
imp[[1]]
imp <- lapply(pred.var, function(x) pdVarImp(trn.nn, pred.var = x, return.partial = TRUE))
unlist(imp)
names(imp)
names(imp) <- pred.var
plot(pc)
x <- 3
attr(x, "a")
library(vip)
imp <- vi_all(trn.nn, pred.var = paste0("x.", 1:10))
source('C:/Users/greenweb/Desktop/devel/vip/R/vi_all.R', echo=TRUE)
imp <- vi_all(trn.nn, pred.var = paste0("x.", 1:10))
imp
imp <- vi_all(trn.nn, pred.var = paste0("x.", 1:10), return.partial = TRUE)
imp
zz <- attr(imp, "partial")
sapply(zz, class)
x
attr(x, "a") <- NULL
x
attributes(x)
library(vip)
imp <- vi(trn.nn, pred.var = paste0("x.", 1:10), return.partial = TRUE)
library(vip)
imp <- vi(trn.nn, pred.var = paste0("x.", 1:10), return.partial = TRUE)
imp
class(imp)
library(vip)
imp <- vi(trn.nn, pred.var = paste0("x.", 1:10), return.partial = TRUE)
?attr
?attributes
library(vip)
imp <- vi(trn.nn, pred.var = paste0("x.", 1:10), return.partial = TRUE)
imp
attributes(imp)
length(attributes(imp))
length(attr(imp, "partial"))
plot(attr(imp, "partial")[[5]])
plot(attr(imp, "partial")[[3]])
plot(attr(imp, "partial")[[4]])
plot(attr(imp, "partial")[[1]])
plot(attr(imp, "partial")[[2]])
zz <- attr(imp, "partial")
names(zz)
zz
imp
names(attributes(imp))
library(vip)
imp <- vi(trn.nn, pred.var = paste0("x.", 1:10), return.partial = TRUE)
imp
names(attributes(imp))
zz <- attr(imp, "partial")
names(zz)
