partial(tune, pred.var = "zn", plot = TRUE, ylim = c(15, 30))
pd <- partial(tune, pred.var = "zn")
plotPartial(pd, ylim = c(15, 30))
conc <- read.csv("Concrete_Data.csv", header = TRUE)
getwd()
list.files()
conc <- read.csv("manuscript-methodology//Concrete_Data.csv", header = TRUE)
head(conc)
conc.cubist <- cubist(Concrete.Compressive.Strength ~ ., data = conc,
committees = 10)
conc.cubist <- cubist(x = subset(conc, select = -Concrete.Compressive.Strength),
y = conc$Concrete.Compressive.Strength,
committees = 10)
conc.cubist <- cubist(x = subset(conc, select = -Concrete.compressive.strength),
y = conc$Concrete.compressive.strength,
committees = 10)
vip(conc.cubist)
vip(conc.cubist, pre.var = names(subset(conc, select = -Concrete.compressive.strength)))
vip(conc.cubist, pred.var = names(subset(conc, select = -Concrete.compressive.strength)))
X <- subset(conc, select = -Concrete.compressive.strength)
y <- conc$Concrete.compressive.strength
conc.cubist <- cubist(x = X, y = y, committees = 10)
vip(conc.cubist, pred.var = names(X), train = X)
plot(varImp(conc.cubist))
class(tune)
set.seed(1139)
conc.rf <- randomForest(x = X, y = y, ntree = 1000, importance = TRUE)
varImpPlot(conc.rf)
plot(conc.rf)
conc.rf
ncol(X)
# FIt a cubist model
X <- subset(conc, select = -Concrete.compressive.strength)
y <- conc$Concrete.compressive.strength
set.seed(1141)
conc.cubist.tune <- train(
x = X,
y = y,
method = "cubist",
metric = "Rsquared",
trControl = trainControl(method = "cv", number = 10, verboseIter = TRUE),
tuneGrid = expand.grid(neighbors = 0:9, committees = 1:20)
)
conc.rf.tune <- train(
x = X,
y = y,
method = "rf",
importance = TRUE,
metric = "Rsquared",
trControl = trainControl(method = "cv", number = 10, verboseIter = TRUE),
tuneGrid = expand.grid(mtry = 1:8)
)
vip(conc.cubist.tune, pred.var = names(X))
varImpPlot(conc.rf.tune$finalModel)
grid.arrange(plot(conc.cubist.tune), plot(conc.rf.tune))
grid.arrange(plot(conc.cubist.tune), plot(conc.rf.tune), ncol = 2)
conc.cubist.tune
conc.rf.tune
p1 <- vip(conc.cubist.tune, pred.var = names(X))
p2 <- vip(conc.rf.tune, pred.var = names(X))
grid.arrange(p1, p2)
grid.arrange(plot(varImp(conc.cubist.tune)), plot(varImp(conc.rf.tune)),
ncol = 2)
grid.arrange(p1, p2, plot(varImp(conc.cubist.tune)), plot(varImp(conc.rf.tune)),
ncol = 2)
partial(conc.cubist.tune, pred.var = "Cement", plot = TRUE, rug = TRUE)
partial(conc.cubist.tune, pred.var = "Age", plot = TRUE, rug = TRUE)
sd(1:10)
sd(c(1, 10))
boxplot(conc$Cement)$out
boxplot(conc$Age)$out
pdVarImp(conc.cubist.tune, pred.var = "Cement", trim.outlers = TRUE)
pdVarImp(conc.cubist.tune, pred.var = "Age", trim.outlers = TRUE)
pdVarImp(conc.cubist.tune, pred.var = "Age", trim.outlers = FALSE)
partial(conc.cubist.tune, pred.var = "Age", plot = TRUE, rug = TRUE, trim.outliers = TRUE)
pdVarImp(conc.cubist.tune, pred.var = "Age", trim.outliers = TRUE)
pairs(conc)
caret::findCorrelation(cor(X))
caret::findCorrelation(X)
caret::findCorrelation(cor(X), 0.8)
caret::findCorrelation(cor(X), 0.5)
cor(X)
plot(varImp(conc.cubist.tune, nonpara = TRUE))
plot(varImp(conc.rf.tune, nonpara = TRUE))
pdVarImp(conc.cubist.tune, pred.var = "Age", FUN = mad)
pdVarImp(conc.cubist.tune, pred.var = "Concrete", FUN = mad)
pdVarImp(conc.cubist.tune, pred.var = "Cement", FUN = mad)
pdVarImp(conc.cubist.tune, pred.var = "Concrete", FUN = function(x) diff(range(x)))
pdVarImp(conc.cubist.tune, pred.var = "Cement", FUN = function(x) diff(range(x)))
pdVarImp(conc.cubist.tune, pred.var = "Age", FUN = function(x) diff(range(x)))
vip(conc.cubist.tune, pred.var = names(X), FUN = function(x) diff(range(x)))
grid.arrange(p1, p2, plot(varImp(conc.cubist.tune)), plot(varImp(conc.rf.tune)),
ncol = 2)
install.packages("sure")
img <- rasterGrob(readPNG("tools\\vip.png"), interpolate = TRUE)
library(grid)
library(png)
img <- rasterGrob(readPNG("tools\\vip.png"), interpolate = TRUE)
img
plot(img)
g <- ggplot() +
geom_polygon(data = hex, aes(x, y), color = greys[7L], fill = greys[1L], size = 3) +
# geom_subview(p, x = 0, y = 0, width = 1.75, height = 1.25) +
annotation_custom(img, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
annotate(geom = "text", label = "vip", x = 0, y = -0.8,
family = "Open Sans Light", color = greys[7L], size = 7) +
# annotate(geom = "text", label = "SUrrogate REsiduals", x = 0, y = 0.7,
#          family = "Open Sans Light", color = greys[7L], size = 3.5) +
coord_equal(xlim = range(hex$x), ylim = range(hex$y)) +
scale_x_continuous(expand = c(0.04, 0)) +
scale_y_reverse(expand = c(0.04, 0)) +
theme_void() +
theme_transparent() +
theme(axis.ticks.length = unit(0, "mm"))
print(g)
library(ggplot2)
g <- ggplot() +
geom_polygon(data = hex, aes(x, y), color = greys[7L], fill = greys[1L], size = 3) +
# geom_subview(p, x = 0, y = 0, width = 1.75, height = 1.25) +
annotation_custom(img, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
annotate(geom = "text", label = "vip", x = 0, y = -0.8,
family = "Open Sans Light", color = greys[7L], size = 7) +
# annotate(geom = "text", label = "SUrrogate REsiduals", x = 0, y = 0.7,
#          family = "Open Sans Light", color = greys[7L], size = 3.5) +
coord_equal(xlim = range(hex$x), ylim = range(hex$y)) +
scale_x_continuous(expand = c(0.04, 0)) +
scale_y_reverse(expand = c(0.04, 0)) +
theme_void() +
theme_transparent() +
theme(axis.ticks.length = unit(0, "mm"))
print(g)
greys <- RColorBrewer::brewer.pal(9, "Greys")
# Hexagon logo
g <- ggplot() +
geom_polygon(data = hex, aes(x, y), color = greys[7L], fill = greys[1L], size = 3) +
# geom_subview(p, x = 0, y = 0, width = 1.75, height = 1.25) +
annotation_custom(img, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
annotate(geom = "text", label = "vip", x = 0, y = -0.8,
family = "Open Sans Light", color = greys[7L], size = 7) +
# annotate(geom = "text", label = "SUrrogate REsiduals", x = 0, y = 0.7,
#          family = "Open Sans Light", color = greys[7L], size = 3.5) +
coord_equal(xlim = range(hex$x), ylim = range(hex$y)) +
scale_x_continuous(expand = c(0.04, 0)) +
scale_y_reverse(expand = c(0.04, 0)) +
theme_void() +
theme_transparent() +
theme(axis.ticks.length = unit(0, "mm"))
print(g)
# Hexagon data
hex <- data.frame(x = 1.35 * 1 * c(-sqrt(3) / 2, 0, rep(sqrt(3) / 2, 2), 0,
rep(-sqrt(3) / 2, 2)),
y = 1.35 * 1 * c(0.5, 1, 0.5, -0.5, -1, -0.5, 0.5))
# Color palettes
greys <- RColorBrewer::brewer.pal(9, "Greys")
# Hexagon logo
g <- ggplot() +
geom_polygon(data = hex, aes(x, y), color = greys[7L], fill = greys[1L], size = 3) +
# geom_subview(p, x = 0, y = 0, width = 1.75, height = 1.25) +
annotation_custom(img, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
annotate(geom = "text", label = "vip", x = 0, y = -0.8,
family = "Open Sans Light", color = greys[7L], size = 7) +
# annotate(geom = "text", label = "SUrrogate REsiduals", x = 0, y = 0.7,
#          family = "Open Sans Light", color = greys[7L], size = 3.5) +
coord_equal(xlim = range(hex$x), ylim = range(hex$y)) +
scale_x_continuous(expand = c(0.04, 0)) +
scale_y_reverse(expand = c(0.04, 0)) +
theme_void() +
theme_transparent() +
theme(axis.ticks.length = unit(0, "mm"))
print(g)
library(ggimage)
# Hexagon logo
g <- ggplot() +
geom_polygon(data = hex, aes(x, y), color = greys[7L], fill = greys[1L], size = 3) +
# geom_subview(p, x = 0, y = 0, width = 1.75, height = 1.25) +
annotation_custom(img, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) +
annotate(geom = "text", label = "vip", x = 0, y = -0.8,
family = "Open Sans Light", color = greys[7L], size = 7) +
# annotate(geom = "text", label = "SUrrogate REsiduals", x = 0, y = 0.7,
#          family = "Open Sans Light", color = greys[7L], size = 3.5) +
coord_equal(xlim = range(hex$x), ylim = range(hex$y)) +
scale_x_continuous(expand = c(0.04, 0)) +
scale_y_reverse(expand = c(0.04, 0)) +
theme_void() +
theme_transparent() +
theme(axis.ticks.length = unit(0, "mm"))
print(g)
g <- ggplot() +
geom_polygon(data = hex, aes(x, y), color = greys[7L], fill = greys[1L], size = 3) +
# geom_subview(p, x = 0, y = 0, width = 1.75, height = 1.25) +
annotation_custom(img, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf)
# annotate(geom = "text", label = "vip", x = 0, y = -0.8,
#          family = "Open Sans Light", color = greys[7L], size = 7) +
# # annotate(geom = "text", label = "SUrrogate REsiduals", x = 0, y = 0.7,
# #          family = "Open Sans Light", color = greys[7L], size = 3.5) +
# coord_equal(xlim = range(hex$x), ylim = range(hex$y)) +
# scale_x_continuous(expand = c(0.04, 0)) +
# scale_y_reverse(expand = c(0.04, 0)) +
# theme_void() +
# theme_transparent() +
# theme(axis.ticks.length = unit(0, "mm"))
print(g)
?readPNG
?rasterGrob
?annotation_custom
source('C:/Users/greenweb/Desktop/devel/vip/tools/vip-logo.R', echo=TRUE)
source('C:/Users/greenweb/Desktop/devel/vip/tools/vip-logo.R', echo=TRUE)
source('C:/Users/greenweb/Desktop/devel/vip/tools/vip-logo.R', echo=TRUE)
source('C:/Users/greenweb/Desktop/devel/vip/tools/vip-logo.R', echo=TRUE)
source('C:/Users/greenweb/Desktop/devel/vip/tools/vip-logo.R', echo=TRUE)
source('C:/Users/greenweb/Desktop/devel/vip/tools/vip-logo.R', echo=TRUE)
source('C:/Users/greenweb/Desktop/devel/vip/tools/vip-logo.R', echo=TRUE)
source('C:/Users/greenweb/Desktop/devel/vip/tools/vip-logo.R', echo=TRUE)
source('C:/Users/greenweb/Desktop/devel/vip/tools/vip-logo.R', echo=TRUE)
source('C:/Users/greenweb/Desktop/devel/vip/tools/vip-logo.R', echo=TRUE)
source('C:/Users/greenweb/Desktop/devel/vip/tools/vip-logo.R', echo=TRUE)
source('C:/Users/greenweb/Desktop/devel/vip/tools/vip-logo.R', echo=TRUE)
if (!requireNamespace("mlbench")) install.packages("mlbench")
set.seed(101)  # for reproducibility
trn <- as.data.frame(mlbench::mlbench.friedman1(n = 500, sd = 1))
tibble::glimpse(trn)
if (!requireNamespace("randomForest")) install.packages("randomForest")
library(randomForest)  # install.packages("randomForest")
set.seed(102)
trn.rf <- randomForest(y ~ ., data = trn, importance = TRUE)
importance(trn.rf)  # for comparison
imp1 <- importance(trn.rf, type = 1) %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable")
library(magrittr)
library(randomForest)  # install.packages("randomForest")
set.seed(102)
trn.rf <- randomForest(y ~ ., data = trn, importance = TRUE)
importance(trn.rf)  # for comparison
imp1 <- importance(trn.rf, type = 1) %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable")
imp2 <- importance(trn.rf, type = 2) %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable")
p1 <- ggplot(imp1, aes(x = reorder(Variable, `%IncMSE`), y = `%IncMSE`)) +
geom_col() +
coord_flip() +
xlab("") +
theme_light()
p2 <- ggplot(imp2, aes(x = reorder(Variable, IncNodePurity), y = IncNodePurity)) +
geom_col() +
coord_flip() +
xlab("") +
theme_light()
p3 <- vip(trn.rf, use.partial = TRUE, pred.var = paste0("x.", 1:10))
library(magrittr)
library(randomForest)  # install.packages("randomForest")
library(vip)
set.seed(102)
trn.rf <- randomForest(y ~ ., data = trn, importance = TRUE)
importance(trn.rf)  # for comparison
imp1 <- importance(trn.rf, type = 1) %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable")
imp2 <- importance(trn.rf, type = 2) %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable")
p1 <- ggplot(imp1, aes(x = reorder(Variable, `%IncMSE`), y = `%IncMSE`)) +
geom_col() +
coord_flip() +
xlab("") +
theme_light()
p2 <- ggplot(imp2, aes(x = reorder(Variable, IncNodePurity), y = IncNodePurity)) +
geom_col() +
coord_flip() +
xlab("") +
theme_light()
p3 <- vip(trn.rf, use.partial = TRUE, pred.var = paste0("x.", 1:10))
library(magrittr)
library(randomForest)  # install.packages("randomForest")
library(vip)
set.seed(102)
trn.rf <- randomForest(y ~ ., data = trn, importance = TRUE)
imp1 <- importance(trn.rf, type = 1) %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable")
imp2 <- importance(trn.rf, type = 2) %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable")
p1 <- ggplot(imp1, aes(x = reorder(Variable, `%IncMSE`), y = `%IncMSE`)) +
geom_col() +
coord_flip() +
xlab("") +
theme_light()
p2 <- ggplot(imp2, aes(x = reorder(Variable, IncNodePurity), y = IncNodePurity)) +
geom_col() +
coord_flip() +
xlab("") +
theme_light()
p3 <- vip(trn.rf, use.partial = TRUE, pred.var = paste0("x.", 1:10))
grid.arrange(p1, p2, p3, ncol = 3)
?importance
# Load required packages
library(magrittr)
library(randomForest)
library(vip)
# Fit a random forest
set.seed(102)
trn.rf <- randomForest(y ~ ., data = trn, importance = TRUE)
# Importance: mean decrease in accuracy
imp1 <- importance(trn.rf, type = 1) %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable")
p1 <- ggplot(imp1, aes(x = reorder(Variable, `%IncMSE`), y = `%IncMSE`)) +
geom_col() +
coord_flip() +
xlab("") +
theme_light()
# Importance: mean decrease node impurity
imp2 <- importance(trn.rf, type = 2) %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable")
p2 <- ggplot(imp2, aes(x = reorder(Variable, IncNodePurity), y = IncNodePurity)) +
geom_col() +
coord_flip() +
xlab("") +
theme_light()
# Importance: partial dependence
p3 <- vip(trn.rf, use.partial = TRUE, pred.var = paste0("x.", 1:10)) +
ylab("pdVarImp") +
theme_light()
# Display all three plots together
grid.arrange(p1, p2, p3, ncol = 3)
# Load required packages
library(magrittr)
library(randomForest)
library(vip)
# Fit a random forest
set.seed(102)
trn.rf <- randomForest(y ~ ., data = trn, importance = TRUE)
# Importance: mean decrease in accuracy
imp1 <- importance(trn.rf, type = 1) %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable")
p1 <- ggplot(imp1, aes(x = reorder(Variable, `%IncMSE`), y = `%IncMSE`)) +
geom_col() +
coord_flip() +
xlab("") +
theme_light()
# Importance: mean decrease node impurity
imp2 <- importance(trn.rf, type = 2) %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable")
p2 <- ggplot(imp2, aes(x = reorder(Variable, IncNodePurity), y = IncNodePurity)) +
geom_col() +
coord_flip() +
xlab("") +
theme_light()
# Importance: partial dependence
p3 <- vip(trn.rf, use.partial = TRUE, pred.var = paste0("x.", 1:10), fill = "#FFFFFF") +
ylab("pdVarImp") +
theme_light()
# Display all three plots together
grid.arrange(p1, p2, p3, ncol = 3)
ggplot(imp2, aes(x = reorder(Variable, IncNodePurity), y = IncNodePurity)) +
geom_col(fill = NULL) +
coord_flip() +
xlab("") +
theme_light()
ggplot(imp2, aes(x = reorder(Variable, IncNodePurity), y = IncNodePurity)) +
geom_col(fill = 1) +
coord_flip() +
xlab("") +
theme_light()
p2 <- ggplot(imp2, aes(x = reorder(Variable, IncNodePurity), y = IncNodePurity)) +
geom_col() +
coord_flip() +
xlab("") +
theme_light()
p2$data
p2$layers
p2$mapping
p2$scales
p2$theme
p2$theme
# Load required packages
library(magrittr)
library(randomForest)
library(vip)
# Fit a random forest
set.seed(102)
trn.rf <- randomForest(y ~ ., data = trn, importance = TRUE)
# Importance: mean decrease in accuracy
imp1 <- importance(trn.rf, type = 1) %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable")
p1 <- ggplot(imp1, aes(x = reorder(Variable, `%IncMSE`), y = `%IncMSE`)) +
geom_col() +
coord_flip() +
xlab("") +
theme_light()
# Importance: mean decrease node impurity
imp2 <- importance(trn.rf, type = 2) %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable")
p2 <- ggplot(imp2, aes(x = reorder(Variable, IncNodePurity), y = IncNodePurity)) +
geom_col() +
coord_flip() +
xlab("") +
theme_light()
# Importance: partial dependence
p3 <- vip(trn.rf, use.partial = TRUE, pred.var = paste0("x.", 1:10), fill = "grey70") +
ylab("pdVarImp") +
theme_light()
# Display all three plots together
grid.arrange(p1, p2, p3, ncol = 3)
p2$coordinates
p2$plot_env
ggplot_build(p)$data
ggplot_build(p2)$data
# Load required packages
library(magrittr)
library(randomForest)
library(vip)
# Fit a random forest
set.seed(102)
trn.rf <- randomForest(y ~ ., data = trn, importance = TRUE)
# Importance: mean decrease in accuracy
imp1 <- importance(trn.rf, type = 1) %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable")
p1 <- ggplot(imp1, aes(x = reorder(Variable, `%IncMSE`), y = `%IncMSE`)) +
geom_col() +
coord_flip() +
xlab("") +
theme_light()
# Importance: mean decrease node impurity
imp2 <- importance(trn.rf, type = 2) %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable")
p2 <- ggplot(imp2, aes(x = reorder(Variable, IncNodePurity), y = IncNodePurity)) +
geom_col() +
coord_flip() +
xlab("") +
theme_light()
# Importance: partial dependence
p3 <- vip(trn.rf, use.partial = TRUE, pred.var = paste0("x.", 1:10), fill = "grey35") +
ylab("pdVarImp") +
theme_light()
# Display all three plots together
grid.arrange(p1, p2, p3, ncol = 3)
library(vip)
# Load required packages
library(magrittr)
library(randomForest)
library(vip)
# Fit a random forest
set.seed(102)
trn.rf <- randomForest(y ~ ., data = trn, importance = TRUE)
# Importance: mean decrease in accuracy
imp1 <- importance(trn.rf, type = 1) %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable")
p1 <- ggplot(imp1, aes(x = reorder(Variable, `%IncMSE`), y = `%IncMSE`)) +
geom_col() +
coord_flip() +
xlab("") +
theme_light()
# Importance: mean decrease node impurity
imp2 <- importance(trn.rf, type = 2) %>%
as.data.frame() %>%
tibble::rownames_to_column("Variable")
p2 <- ggplot(imp2, aes(x = reorder(Variable, IncNodePurity), y = IncNodePurity)) +
geom_col() +
coord_flip() +
xlab("") +
theme_light()
# Importance: partial dependence
p3 <- vip(trn.rf, use.partial = TRUE, pred.var = paste0("x.", 1:10)) +
ylab("pdVarImp") +
theme_light()
# Display all three plots together
grid.arrange(p1, p2, p3, ncol = 3)
source('~/.active-rstudio-document', echo=TRUE)
getwd()
library(randomForest)
library(ggplot2)
library(pdp)
library(randomForest)
# Fit a random forest to the iris data
set.seed(101)  # for reproducibility
iris.rf <- randomForest(Species ~ ., data = iris)
plot(iris.rf)
# Load required packages
library(ggplot2)
library(pdp)
library(randomForest)
# Fit a random forest to the iris data
set.seed(101)  # for reproducibility
iris.rf <- randomForest(Species ~ ., data = iris)
# Partial dependence plot for Petal.Length on class 1 (i.e. setosa)
pd1 <- partial(iris.rf, pred.var = "Petal.Length", which.class = 1, prob = TRUE)
# Partial dependence plot for Petal.Length on class 2 (i.e. versicolor)
pd2 <- partial(iris.rf, pred.var = "Petal.Length", which.class = 2, prob = TRUE)
# Partial dependence plot for Petal.Length on class 3 (i.e. verginica)
pd3 <- partial(iris.rf, pred.var = "Petal.Length", which.class = 3, prob = TRUE)
# Bind together into a single data frame
pd <- rbind(cbind(pd1, "Class" = "1"),
cbind(pd2, "Class" = "2"),
cbind(pd3, "Class" = "3"))
# Display all three plots
ggplot(pd, aes(x = Petal.Length, y = yhat, color = Class)) +
geom_line() +
xlab("Petal length") +
ylab("Probability") +
theme_light()
