pd2
sd(pd2$yhat)
sds <- tapply(pd$yhat, pd$x.1, FUN = function(x) sd(x))
head(sds)
sd(sds)
sd(pd$yhat)
pd %>% group_by(x.1) %>% summarize(sd(yhat))
head(sds)
sd(tapply(pd$yhat, INDEX = pd$x.2, FUN = sd))
pd <- partial(trn.nn, pred.var = c("x.1", "x.7"))
sd(tapply(pd$yhat, INDEX = pd$x.1, FUN = sd))
sd(tapply(pd$yhat, INDEX = pd$x.2, FUN = sd))
length(unique(pd$x.1))
length(unique(pd$x.2))
sd(tapply(pd$yhat, INDEX = pd$x.1, FUN = sd))
sd(tapply(pd$yhat, INDEX = pd$x.7, FUN = sd))
sd(tapply(pd$yhat, INDEX = pd$x.7, FUN = sd))
pd <- partial(trn.nn, pred.var = c("x.1", "x.2"))
sd(tapply(pd$yhat, INDEX = pd$x.1, FUN = sd))
sd(tapply(pd$yhat, INDEX = pd$x.7, FUN = sd))
sd(tapply(pd$yhat, INDEX = pd$x.2, FUN = sd))
vi2 <- function(x, y) {
pd <- partial(trn.nn, pred.var = c(x, y))
c(sd(tapply(pd$yhat, INDEX = pd$x.1, FUN = sd)),
sd(tapply(pd$yhat, INDEX = pd$x.2, FUN = sd)))
}
vi2("x1", "x3")
vi2("x.1", "x.3")
vi2 <- function(x, y) {
pd <- partial(trn.nn, pred.var = c(x, y))
c(sd(tapply(pd$yhat, INDEX = pd[[x]], FUN = sd)),
sd(tapply(pd$yhat, INDEX = pd[[y]], FUN = sd)))
}
vi2("x.1", "x.3")
x <- paste0("x.", 1:10)
expand.grid(x = x, y = y)
expand.grid(x = x, y = x)
combn(x, m = 2)
comdns <- t(combn( paste0("x.", 1:10), m = 2))
combns
combns <- t(combn( paste0("x.", 1:10), m = 2))
combns
?plyr::aaply
?apply
vi2 <- function(x) {
pd <- partial(trn.nn, pred.var = c(x[1L], x[2L]))
c(sd(tapply(pd$yhat, INDEX = pd[[x]], FUN = sd)),
sd(tapply(pd$yhat, INDEX = pd[[y]], FUN = sd)))
}
res <- apply(head(combns), MARGIN = 1, FUN = vi2)
res <- apply(head(combns, 2), MARGIN = 1, FUN = vi2)
vi2(combns[1, ])
combns[1, ]
zz <- vi2(combns[1, ])
zz
zz <- combns[1, ]
zz[1]
zz[2]
vi2 <- function(x) {
pd <- partial(trn.nn, pred.var = c(x[1L], x[2L]))
c(sd(tapply(pd$yhat, INDEX = pd[[x[1L]]], FUN = sd)),
sd(tapply(pd$yhat, INDEX = pd[[x[2L]]], FUN = sd)))
}
res <- apply(head(combns, 2), MARGIN = 1, FUN = vi2)
res
res
res <- t(apply(combns, MARGIN = 1, FUN = vi2))
res
plot(res[, 1], type = "h")
plot(rowMeans(res), type = "h")
?plyr::aaply
library(nnet)
library(vip)
# Simulate the data
set.seed(101)  # for reproducibility
trn <- as.data.frame(mlbench::mlbench.friedman1(n = 500, sd = 1))
tibble::glimpse(trn)
# # Setup for k-fold cross-validation
# ctrl <- trainControl(method = "cv", number = 5, verboseIter = TRUE)
# set.seed(103)
# trn.nn.tune <- train(
#   x = subset(trn, select = -y),
#   y = trn$y,
#   method = "nnet",
#   linout = TRUE,
#   maxit = 1000,
#   trControl = ctrl,
#   tuneGrid = expand.grid(size = 1:20, decay = c(0, 0.0001, 0.001, 0.01, 0.1))
# )
# plot(trn.nn.tune)
#    size decay     RMSE  Rsquared     RMSESD  RsquaredSD
# 39    8  0.01 1.205598 0.9443347 0.08825044 0.005865337
# Fit a neural network to the Firedman 1 data set
set.seed(103)
trn.nn <- nnet(y ~ ., data = trn, size = 8, linout = TRUE, decay = 0.01,
maxit = 1000, trace = FALSE)
vint <- function(x) {
pd <- partial(trn.nn, pred.var = c(x[1L], x[2L]))
c(sd(tapply(pd$yhat, INDEX = pd[[x[1L]]], FUN = sd)),
sd(tapply(pd$yhat, INDEX = pd[[x[2L]]], FUN = sd)))
}
combns <- combn( paste0("x.", 1:10), m = 2)
res <- plyr::apply(combns, .margins = 1, .fun = vi2, .progress = "text")
plot(colMeans(res), type = "h")
res <- plyr::aaply(combns, .margins = 1, .fun = vi2, .progress = "text")
res <- plyr::aaply(combns, .margins = 1, .fun = vint, .progress = "text")
library(pdp)
res <- plyr::aaply(combns, .margins = 1, .fun = vint, .progress = "text")
combns <- combn( paste0("x.", 1:10), m = 2)
res <- plyr::aaply(combns, .margins = 1, .fun = vint, .progress = "text", .inform = TRUE)
res <- plyr::aaply(combns, .margins = 2, .fun = vint, .progress = "text", .inform = TRUE)
plot(colMeans(res), type = "h")
head(res)
plot(rowMeans(res), type = "h")
combns
paste0(combns[1L, ], combns[2L, ])
paste0(combns[1L, ], "*", combns[2L, ])
d <- data.frame(x = paste0(combns[1L, ], "*", combns[2L, ]), y = rowMeans(res))
ggplot(d, aes(x, y)) +
geom_col()
library(ggplot2)
d <- data.frame(x = paste0(combns[1L, ], "*", combns[2L, ]), y = rowMeans(res))
ggplot(d, aes(x, y)) +
geom_col()
d <- data.frame(x = paste0(combns[1L, ], "*", combns[2L, ]), y = rowMeans(res))
ggplot(d, aes(reorder(x, y), y)) +
geom_col() +
coord_flip()
ggplot(d, aes(reorder(x, y), y)) +
geom_col() +
xlab("") +
ylab("Interaction")
coord_flip()
ggplot(d, aes(reorder(x, y), y)) +
geom_col() +
xlab("") +
ylab("Interaction") +
coord_flip()
ggplot(d, aes(reorder(x, y), y)) +
geom_col() +
xlab("") +
ylab("Interaction")
ggplot(d, aes(reorder(x, desc(y)), y)) +
geom_col() +
xlab("") +
ylab("Interaction")
?reorder
ggplot(d, aes(reorder(x, -y), y)) +
geom_col() +
xlab("") +
ylab("Interaction")
ggplot(d, aes(reorder(x, -y), y)) +
geom_col() +
xlab("") +
ylab("Interaction") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_light()
ggplot(d, aes(reorder(x, -y), y)) +
geom_col() +
xlab("") +
ylab("Interaction") +
theme(axis.text.y = element_text(angle = 45, hjust = 1)) +
theme_light()
ggplot(d, aes(reorder(x, -y), y)) +
geom_col() +
xlab("") +
ylab("Interaction") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme_light()
ggplot(d, aes(reorder(x, -y), y)) +
geom_col() +
xlab("") +
ylab("Interaction") +
theme(axis.text.x = element_text(angle = -90, hjust = 0)) +
theme_light()
ggplot(d, aes(reorder(x, -y), y)) +
geom_col() +
xlab("") +
ylab("Interaction") +
theme(axis.text.x = element_text(angle = -45, hjust = 0)) +
theme_light()
d <- data.frame(x = paste0(combns[1L, ], "_", combns[2L, ]), y = rowMeans(res))
ggplot(d, aes(reorder(x, -y), y)) +
geom_col() +
xlab("") +
ylab("Interaction") +
theme(axis.text.x = element_text(angle = -45, hjust = 0)) +
theme_light()
ggplot(d, aes(reorder(x, -y), y)) +
geom_col() +
xlab("") +
ylab("Interaction") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme_light()
ggplot(d, aes(reorder(x, -y), y)) +
geom_col() +
xlab("") +
ylab("Interaction") +
theme(axis.text.x = element_text(angle = 45, vjust = 1)) +
theme_light()
ggplot(d, aes(reorder(x, -y), y)) +
geom_col() +
xlab("") +
ylab("Interaction") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 30)) +
theme_light()
ggplot(d, aes(reorder(x, -y), y)) +
geom_col() +
xlab("") +
ylab("Interaction") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 30)) +
theme_light()
library(ggplot2)
d <- data.frame(x = paste0(combns[1L, ], "*", combns[2L, ]), y = rowMeans(res))
ggplot(d, aes(reorder(x, -y), y)) +
geom_col() +
xlab("") +
ylab("Interaction") +
theme(axis.text.x = element_text(angle = 45, vjust = 1)) +
theme_light()
pdf(file = "manuscript-methodology\\network-int.pdf", width = 8, height = 4)
ggplot(d, aes(reorder(x, -y), y)) +
geom_col() +
xlab("") +
ylab("Interaction") +
theme(axis.text.x = element_text(angle = 45, vjust = 1)) +
theme_light()
dev.off()
?mlbench::mlbench.friedman2
?mlbench::mlbench.friedman3
set.seed(101)
trn3 <- as.data.frame(mlbench.friedman3(n = 500, sd = 0.1))
library(mlbench)
library(nnet)
library(pdp)
library(randomForest)
library(vip)
set.seed(101)
trn3 <- as.data.frame(mlbench.friedman3(n = 500, sd = 0.1))
pairs(trn3)
set.seed(201)
rf3 <- randomForest(y ~ , data = trn3, ntree = 1000, importance = TRUE)
plot(rf3)
set.seed(201)
rf3 <- randomForest(y ~ ., data = trn3, ntree = 1000, importance = TRUE)
plot(rf3)
rf3
set.seed(201)
rf3 <- randomForest(y ~ ., data = trn3, ntree = 500, importance = TRUE)
plot(rf3)
names(trn3)
combns <- combn(paste0("x.", 1:4), m = 2)
res <- plyr::aaply(combns, .margins = 2, .progress = "text", .fun = function(x) {
pd <- partial(rf3, pred.var = c(x[1L], x[2L]))
c(sd(tapply(pd$yhat, INDEX = pd[[x[1L]]], FUN = sd)),
sd(tapply(pd$yhat, INDEX = pd[[x[2L]]], FUN = sd)))
})
plot(rowMeans(res), type = "h")
?text
text(1:6, rowMeans(res), labels = paste0(combns[1L, ], "*", combns[2L, ]))
plot(rowMeans(res), type = "h")
text(1:6, rowMeans(res), labels = paste0(combns[1L, ], "*", combns[2L, ]),
offset = 1)
plot(rowMeans(res), type = "h")
text(1:6, rowMeans(res), labels = paste0(combns[1L, ], "*", combns[2L, ]),
pos = 3)
plot(rowMeans(res), type = "h")
text(1:6, rowMeans(res), labels = paste0(combns[1L, ], "*", combns[2L, ]),
pos = 4)
plot(rowMeans(res), type = "h")
text(1:6, rowMeans(res), labels = paste0(combns[1L, ], "*", combns[2L, ]),
pos = 3, ylim = c(0, 0.05))
plot(rowMeans(res), type = "h", ylim = c(0, 0.05))
text(1:6, rowMeans(res), labels = paste0(combns[1L, ], "*", combns[2L, ]),
pos = 3)
plot(rowMeans(res), type = "h", ylim = c(0, 0.04))
text(1:6, rowMeans(res), labels = paste0(combns[1L, ], "*", combns[2L, ]),
pos = 3)
plot(rowMeans(res), type = "h", ylim = c(0, 0.04))
text(1:6, rowMeans(res), labels = paste0(combns[1L, ], "*", combns[2L, ]),
pos = 3)
set.seed(102)
rf2 <- randomForest(y ~ ., data = trn2, ntree = 500, importance = TRUE)
plot(rf2)
set.seed(101)
trn2 <- as.data.frame(mlbench.friedman2(n = 500, sd = 125))
trn3 <- as.data.frame(mlbench.friedman3(n = 500, sd = 0.1))
pairs(trn)
names(trn2)
2
2
pairs(trn2)
set.seed(102)
rf2 <- randomForest(y ~ ., data = trn2, ntree = 500, importance = TRUE)
plot(rf2)
combns <- combn(paste0("x.", 1:4), m = 2)
res <- plyr::aaply(combns, .margins = 2, .progress = "text", .fun = function(x) {
pd <- partial(rf2, pred.var = c(x[1L], x[2L]))
c(sd(tapply(pd$yhat, INDEX = pd[[x[1L]]], FUN = sd)),
sd(tapply(pd$yhat, INDEX = pd[[x[2L]]], FUN = sd)))
})
plot(rowMeans(res), type = "h")
text(1:6, rowMeans(res), labels = paste0(combns[1L, ], "*", combns[2L, ]),
pos = 3)
plot(rowMeans(res), type = "h", ylim = c(0, 110))
text(1:6, rowMeans(res), labels = paste0(combns[1L, ], "*", combns[2L, ]),
pos = 3)
rf2
partial(rf2, pred.var = c("x2", "x3"),  plot = TRUE, chull = TRUE)
partial(rf2, pred.var = c("x.2", "x.3"),  plot = TRUE, chull = TRUE)
pd <- partial(rf2, pred.var = c("x.2", "x.3"), progress = "text", chull = TRUE)
autoplot(pd)
library(viridis)
autoplot(pd) + scale_fill_viridis()
autoplot(pd)
install.packages("Cubist")
library(Cubist)
boston.cubist <- cubist(cmedv ~ ., data = boston)
boston.cubist <- cubist(x = subset(boston, select = -cmedv),
y = boston$cmedv,
committees = 10)
vip(boston.cubist, pred.var = names(subset(boston, select = -cmedv)))
vip(boston.cubist, pred.var = names(subset(boston, select = -cmedv)),
train = boston)
vip(boston.cubist, pred.var = names(subset(boston, select = -cmedv)),
train = boston, progress = "text")
caret::getModelInfo("cubist")
ctrl <- trainControl(method = "cv", number = 10, verboseIter = TRUE)
tune.grid <- expand.grid(neighbors = 0:9, committees = 1:20)
tune <- train(
x = subset(boston, select = -cmedv),
y = boston$cmedv,
method = "cubist",
metric = "Rsquared",
trControl = ctrl,
tuneGrid = tune.grid
)
plot(tune)
library(caret)
ctrl <- trainControl(method = "cv", number = 10, verboseIter = TRUE)
tune.grid <- expand.grid(neighbors = 0:9, committees = 1:20)
tune <- train(
x = subset(boston, select = -cmedv),
y = boston$cmedv,
method = "cubist",
metric = "Rsquared",
trControl = ctrl,
tuneGrid = tune.grid
)
plot(tune)
tune
tune$bestTune
tune$results[64, ]
sample(9)
sample(9, size = 4, replace = TRUE)
set.seed(1001)
tune <- train(
x = subset(boston, select = -cmedv),
y = boston$cmedv,
method = "cubist",
metric = "Rsquared",
trControl = ctrl,
tuneGrid = tune.grid
)
plot(tune)
tune$bestTune
tune$results[44L, ]
?cubist
caret::getModelInfo("cubist")
boston.cubist <- tune
vip(boston.cubist, pred.var = names(subset(boston, select = -cmedv)),
train = boston, progress = "text")
plot(varImp(boston.cubist))
varImpPlot(boston.rf)
set.seed(101)
boston.rf <- randomForest(cmedv ~ ., data = boston, mtry = 6, ntree = 1000,
importance = TRUE)
varImpPlot(boston.rf)
partial(boston.cubist, pred.var = "lstat")
partial(boston.cubist, pred.var = "lstat", plot = TRUE)
fit <- cubist(x = subset(trn1, select = -y), y = trn1$y)
set.seed(101)
trn1 <- as.data.frame(mlbench.friedman1(500))
trn2 <- as.data.frame(mlbench.friedman2(500))
trn3 <- as.data.frame(mlbench.friedman3(500))
fit <- cubist(x = subset(trn1, select = -y), y = trn1$y)
fit <- cubist(x = subset(trn1, select = -y), y = trn1$y, committees = 10)
vip(fit, pred.var = paste0("x.", 1:10))
vip(fit, pred.var = paste0("x.", 1:10), train = trn1)
?mlbench.friedman1
pd.lstat <- partial(boston.rf, pred.var = "lstat")
pd.rm <- partial(boston.rf, pred.var = "rm")
pd.zn <- partial(boston.rf, pred.var = "zn")
pd.range <- range(c(pd1$yhat, pd2$yhat, pd3$yhat))
pdp.lstat <- autoplot(pd.lstat) +
ylim(pd.range[1L], pd.range[2L]) +
theme_light() +
geom_hline(yintercept = mean(boston$cmedv), linetype = 2, col = set1[1L],
alpha = 0.5)
pdp.rm <- autoplot(pd.rm) +
ylim(pd.range[1L], pd.range[2L]) +
theme_light() +
geom_hline(yintercept = mean(boston$cmedv), linetype = 2, col = set1[1L],
alpha = 0.5)
pdp.zn <- autoplot(pd.zn) +
ylim(pd.range[1L], pd.range[2L]) +
theme_light() +
geom_hline(yintercept = mean(boston$cmedv), linetype = 2, col = set1[1L],
alpha = 0.5)
boston.rf.vi <- vi(boston.rf)
boston.rf.vi <- vi(boston.rf, pred.var = names(subset(boston, select = -cmedv)))
boston.rf.vi
?knitr::kable
knitr::kable(boston.rf.vi, format = "latex")
getModelInfo("cubist")
?cubist
summary(tune$finalModel)
partial(tune, pred.var = "zn", plot = TRUE)
partial(tune, pred.var = "zn", plot = TRUE, ylim = c(15, 30))
pd <- partial(tune, pred.var = "zn")
plotPartial(pd, ylim = c(15, 30))
conc <- read.csv("Concrete_Data.csv", header = TRUE)
getwd()
list.files()
conc <- read.csv("manuscript-methodology//Concrete_Data.csv", header = TRUE)
head(conc)
conc.cubist <- cubist(Concrete.Compressive.Strength ~ ., data = conc,
committees = 10)
conc.cubist <- cubist(x = subset(conc, select = -Concrete.Compressive.Strength),
y = conc$Concrete.Compressive.Strength,
committees = 10)
conc.cubist <- cubist(x = subset(conc, select = -Concrete.compressive.strength),
y = conc$Concrete.compressive.strength,
committees = 10)
vip(conc.cubist)
vip(conc.cubist, pre.var = names(subset(conc, select = -Concrete.compressive.strength)))
vip(conc.cubist, pred.var = names(subset(conc, select = -Concrete.compressive.strength)))
X <- subset(conc, select = -Concrete.compressive.strength)
y <- conc$Concrete.compressive.strength
conc.cubist <- cubist(x = X, y = y, committees = 10)
vip(conc.cubist, pred.var = names(X), train = X)
plot(varImp(conc.cubist))
class(tune)
set.seed(1139)
conc.rf <- randomForest(x = X, y = y, ntree = 1000, importance = TRUE)
varImpPlot(conc.rf)
plot(conc.rf)
conc.rf
ncol(X)
# FIt a cubist model
X <- subset(conc, select = -Concrete.compressive.strength)
y <- conc$Concrete.compressive.strength
set.seed(1141)
conc.cubist.tune <- train(
x = X,
y = y,
method = "cubist",
metric = "Rsquared",
trControl = trainControl(method = "cv", number = 10, verboseIter = TRUE),
tuneGrid = expand.grid(neighbors = 0:9, committees = 1:20)
)
conc.rf.tune <- train(
x = X,
y = y,
method = "rf",
importance = TRUE,
metric = "Rsquared",
trControl = trainControl(method = "cv", number = 10, verboseIter = TRUE),
tuneGrid = expand.grid(mtry = 1:8)
)
vip(conc.cubist.tune, pred.var = names(X))
varImpPlot(conc.rf.tune$finalModel)
grid.arrange(plot(conc.cubist.tune), plot(conc.rf.tune))
grid.arrange(plot(conc.cubist.tune), plot(conc.rf.tune), ncol = 2)
conc.cubist.tune
conc.rf.tune
p1 <- vip(conc.cubist.tune, pred.var = names(X))
p2 <- vip(conc.rf.tune, pred.var = names(X))
grid.arrange(p1, p2)
grid.arrange(plot(varImp(conc.cubist.tune)), plot(varImp(conc.rf.tune)),
ncol = 2)
grid.arrange(p1, p2, plot(varImp(conc.cubist.tune)), plot(varImp(conc.rf.tune)),
ncol = 2)
partial(conc.cubist.tune, pred.var = "Cement", plot = TRUE, rug = TRUE)
partial(conc.cubist.tune, pred.var = "Age", plot = TRUE, rug = TRUE)
sd(1:10)
sd(c(1, 10))
boxplot(conc$Cement)$out
boxplot(conc$Age)$out
pdVarImp(conc.cubist.tune, pred.var = "Cement", trim.outlers = TRUE)
pdVarImp(conc.cubist.tune, pred.var = "Age", trim.outlers = TRUE)
pdVarImp(conc.cubist.tune, pred.var = "Age", trim.outlers = FALSE)
partial(conc.cubist.tune, pred.var = "Age", plot = TRUE, rug = TRUE, trim.outliers = TRUE)
pdVarImp(conc.cubist.tune, pred.var = "Age", trim.outliers = TRUE)
pairs(conc)
caret::findCorrelation(cor(X))
caret::findCorrelation(X)
caret::findCorrelation(cor(X), 0.8)
caret::findCorrelation(cor(X), 0.5)
cor(X)
plot(varImp(conc.cubist.tune, nonpara = TRUE))
plot(varImp(conc.rf.tune, nonpara = TRUE))
pdVarImp(conc.cubist.tune, pred.var = "Age", FUN = mad)
pdVarImp(conc.cubist.tune, pred.var = "Concrete", FUN = mad)
pdVarImp(conc.cubist.tune, pred.var = "Cement", FUN = mad)
pdVarImp(conc.cubist.tune, pred.var = "Concrete", FUN = function(x) diff(range(x)))
pdVarImp(conc.cubist.tune, pred.var = "Cement", FUN = function(x) diff(range(x)))
pdVarImp(conc.cubist.tune, pred.var = "Age", FUN = function(x) diff(range(x)))
vip(conc.cubist.tune, pred.var = names(X), FUN = function(x) diff(range(x)))
grid.arrange(p1, p2, plot(varImp(conc.cubist.tune)), plot(varImp(conc.rf.tune)),
ncol = 2)
install.packages("sure")
